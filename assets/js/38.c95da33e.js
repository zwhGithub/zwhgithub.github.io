(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{724:function(e,t,_){"use strict";_.r(t);var v=_(81),a=Object(v.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"redis之过期策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis之过期策略"}},[e._v("#")]),e._v(" Redis之过期策略")]),e._v(" "),t("blockquote",[t("p",[e._v("我们在使用redis时，一般会设置一个过期时间，当然也有不设置过期时间的，也就是永久不过期。\n当我们设置了过期时间，redis是如何判断是否过期，以及根据什么策略来进行删除的。")])]),e._v(" "),t("p",[e._v("redis设置过期时间：")]),e._v(" "),t("p",[t("code",[e._v("expire key time")]),e._v("(以秒为单位)–这是最常用的方式")]),e._v(" "),t("p",[t("code",[e._v("setex(String key, int seconds, String value)")]),e._v("字符串独有的方式")]),e._v(" "),t("p",[e._v("除了字符串自己独有设置过期时间的方法外，其他方法都需要依靠expire方法来设置时间")]),e._v(" "),t("p",[e._v("如果没有设置时间，那缓存就是永不过期，"),t("strong",[e._v("如果设置了过期时间，之后又想让缓存永不过期，使用"),t("code",[e._v("persist key")])])]),e._v(" "),t("h2",{attrs:{id:"定时删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定时删除"}},[e._v("#")]),e._v(" 定时删除")]),e._v(" "),t("blockquote",[t("p",[e._v("含义：在设置key的过期时间的同时，为该key创建一个定时器，让定时器在key的过期时间来临时，对key进行删除。")])]),e._v(" "),t("h3",{attrs:{id:"优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[e._v("#")]),e._v(" 优点")]),e._v(" "),t("p",[e._v("保证内存被尽快释放")]),e._v(" "),t("h3",{attrs:{id:"缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[e._v("#")]),e._v(" 缺点")]),e._v(" "),t("p",[e._v("若过期key很多，删除这些key会占用很多的CPU时间，在CPU时间紧张的情况下，CPU不能把所有的时间用来做要紧的事儿，还需要去花时间删除这些key. 定时器的创建耗时，若为每一个设置过期时间的key创建一个定时器（将会有大量的定时器产生），性能影响严重")]),e._v(" "),t("h2",{attrs:{id:"懒汉式删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#懒汉式删除"}},[e._v("#")]),e._v(" 懒汉式删除")]),e._v(" "),t("blockquote",[t("p",[e._v("含义：key过期的时候不删除，每次通过key获取值的时候去检查是否过期，若过期，则删除，返回null。")])]),e._v(" "),t("h3",{attrs:{id:"优点-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优点-2"}},[e._v("#")]),e._v(" 优点")]),e._v(" "),t("p",[e._v("删除操作只发生在通过key取值的时候发生，而且只删除当前key，所以对CPU时间的占用是比较少的，而且此时的删除是已经到了非做不可的地步（如果此时还不删除的话，我们就会获取到了已经过期的key了）")]),e._v(" "),t("h3",{attrs:{id:"缺点-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点-2"}},[e._v("#")]),e._v(" 缺点")]),e._v(" "),t("p",[e._v("若大量的key在超出超时时间后，很久一段时间内，都没有被获取过，那么可能发生内存泄露（无用的垃圾占用了大量的内存）")]),e._v(" "),t("h2",{attrs:{id:"定期删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定期删除"}},[e._v("#")]),e._v(" 定期删除")]),e._v(" "),t("blockquote",[t("p",[e._v("含义：每隔一段时间执行一次删除过期key操作")])]),e._v(" "),t("h3",{attrs:{id:"优点-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优点-3"}},[e._v("#")]),e._v(" 优点")]),e._v(" "),t("p",[e._v("通过限制删除操作的时长和频率，来减少删除操作对CPU时间的占用–处理”定时删除”的缺点")]),e._v(" "),t("h3",{attrs:{id:"缺点-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点-3"}},[e._v("#")]),e._v(" 缺点")]),e._v(" "),t("p",[e._v("在内存友好方面，不如”定时删除”（会造成一定的内存占用，但是没有懒汉式那么占用内存） 在CPU时间友好方面，不如”懒汉式删除”（会定期的去进行比较和删除操作，cpu方面不如懒汉式，但是比定时好）")]),e._v(" "),t("p",[e._v("难点：合理设置删除操作的执行时长（每次删除执行多长时间）和执行频率（每隔多长时间做一次删除）（这个要根据服务器运行情况来定了），每次执行时间太长，或者执行频率太高对cpu都是一种压力。每次进行定期删除操作执行之后，需要记录遍历循环到了哪个标志位，以便下一次定期时间来时，从上次位置开始进行循环遍历")]),e._v(" "),t("p",[e._v("说明：memcached只是用了惰性删除，而redis同时使用了惰性删除与定期删除，这也是二者的一个不同点。")]),e._v(" "),t("h2",{attrs:{id:"redis采用的过期策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis采用的过期策略"}},[e._v("#")]),e._v(" Redis采用的过期策略")]),e._v(" "),t("p",[e._v("懒汉式删除+定期删除\n懒汉式删除流程：")]),e._v(" "),t("ol",[t("li",[e._v("在进行get或setnx等操作时，先检查key是否过期；")]),e._v(" "),t("li",[e._v("若过期，删除key，然后执行相应操作；")]),e._v(" "),t("li",[e._v("若没过期，直接执行相应操作；")]),e._v(" "),t("li",[e._v("定期删除流程（简单而言，对指定个数个库的每一个库随机删除小于等于指定个数个过期key）：")]),e._v(" "),t("li",[e._v("遍历每个数据库（就是redis.conf中配置的”database”数量，默认为16）")]),e._v(" "),t("li",[e._v("检查当前库中的指定个数个key（默认是每个库检查20个key，注意相当于该循环执行20次，循环体是下边的描述）")]),e._v(" "),t("li",[e._v("如果当前库中没有一个key设置了过期时间，直接执行下一个库的遍历")]),e._v(" "),t("li",[e._v("随机获取一个设置了过期时间的key，检查该key是否过期，如果过期，删除key")]),e._v(" "),t("li",[e._v("判断定期删除操作是否已经达到指定时长，若已经达到，直接退出定期删除。")])]),e._v(" "),t("p",[e._v("对于定期删除，在程序中有一个全局变量current_db来记录下一个将要遍历的库，假设有16个库，我们这一次定期删除遍历了10个，那此时的current_db就是11，下一次定期删除就从第11个库开始遍历，假设current_db等于15了，那么之后遍历就再从0号库开始（此时current_db==0）")]),e._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),t("p",[e._v("在实际中，如果我们要自己设计过期策略， 在使用"),t("strong",[e._v("懒汉式删除+定期删除")]),e._v("，控制时长和频率这个尤为关键，需要结合服务器性能，已经并发量等情况进行调整，以致最佳。")])])}),[],!1,null,null,null);t.default=a.exports}}]);