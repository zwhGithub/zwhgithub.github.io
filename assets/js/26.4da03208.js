(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{712:function(t,s,a){"use strict";a.r(s);var n=a(81),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"浅谈js-event-loop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浅谈js-event-loop"}},[t._v("#")]),t._v(" 浅谈JS Event Loop")]),t._v(" "),s("blockquote",[s("p",[t._v("我们都知道JavaScript是单线程的，也就是说同一时间只能干一件事。这是因为JavaScript主要是用来操作DOM的，如果变成多线程，浏览器就懵逼了，不知道该听谁的了。但是虽然js是单线程，但是完全可以模拟多线程，靠的就是"),s("code",[t._v("Event Loop")]),t._v("。")])]),t._v(" "),s("p",[t._v("我们都知道js中的代码分 同步 和 异步，所谓的 异步 其实就是不会阻塞我们的主线程，等待主线程的代码执行完毕才会执行。"),s("code",[t._v("callback setTimeout setInterval Promise ...")]),t._v(" 这些都是都是我们耳熟能详的 "),s("strong",[t._v("异步")]),t._v(" 代码。")]),t._v(" "),s("p",[t._v("js中的内存分为 "),s("code",[t._v("堆内存(heap)")]),t._v(" 和 "),s("code",[t._v("栈内存(stack)")]),t._v(", 堆内存 中存的是我们声明的"),s("code",[t._v("object")]),t._v("类型的数据，"),s("code",[t._v("栈内存 中存的是 基本数据类型 以及 函数执行时的运行空间")]),t._v("。我们的 同步 代码就放在 "),s("code",[t._v("执行栈")]),t._v(" 中，那异步代码呢？浏览器会将 dom事件 ajax setTimeout等"),s("code",[t._v("异步代码放到队列中")]),t._v("，等待"),s("code",[t._v("执行栈")]),t._v("中的代码都执行完毕，才会执行队列中的代码，是不是有点像发布订阅模式。")]),t._v(" "),s("p",[t._v("总结：\n"),s("strong",[t._v("栈内存 中存的是 基本数据类型 以及 函数执行时的运行空间。同步代码放在执行栈，异步代码放在队列里，等待执行栈中的代码都执行完毕，才会执行队列中的代码")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"异步任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异步任务"}},[t._v("#")]),t._v(" 异步任务")]),t._v(" "),s("p",[s("strong",[t._v("异步任务 分为 "),s("code",[t._v("微任务(microtask)")]),t._v(" 和 "),s("code",[t._v("宏任务(task)")]),t._v("，执行的顺序是。"),s("code",[t._v("执行栈中的代码 => 微任务 => 宏任务")]),t._v("。")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nPromise"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[t._v("输出的永远是"),s("code",[t._v("1, 3, 2")]),t._v(", 也就是说 "),s("code",[t._v("promise")]),t._v("在 "),s("code",[t._v("setTimeout")]),t._v(" 之前执行了。")]),t._v(" "),s("h3",{attrs:{id:"执行栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行栈"}},[t._v("#")]),t._v(" 执行栈")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("执行栈")]),t._v("中的代码永远最先执行。")])]),t._v(" "),s("h3",{attrs:{id:"微任务-microtask-promise-mutationobserver"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#微任务-microtask-promise-mutationobserver"}},[t._v("#")]),t._v(" 微任务(microtask): promise MutationObserver ...")]),t._v(" "),s("ul",[s("li",[t._v("当"),s("code",[t._v("执行栈中")]),t._v("的代码执行完毕，会在执行"),s("code",[t._v("宏任务")]),t._v("队列之前先看看"),s("code",[t._v("微任务")]),t._v("队列中有没有任务，如果有会先将微任务队列中的任务清空才会去执行宏任务队列。")])]),t._v(" "),s("h3",{attrs:{id:"宏任务-task-settimeout-setinterval"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#宏任务-task-settimeout-setinterval"}},[t._v("#")]),t._v(" 宏任务(task): setTimeout setInterval")]),t._v(" "),s("ul",[s("li",[t._v("等待"),s("code",[t._v("执行栈")]),t._v("和"),s("code",[t._v("微任务")]),t._v("队列都执行完毕才会执行，并且在执行完每一个"),s("code",[t._v("宏任务")]),t._v("之后，会去看看"),s("code",[t._v("微任务")]),t._v("队列有没有新添加的任务，如果有，会先将微任务队列中的任务清空，才会继续执行下一个"),s("code",[t._v("宏任务")]),t._v("。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);